-- CREATE DATABASE AND USE
CREATE DATABASE DB_TEST;
USE DB_TEST;

-- CREATE TABLES DATABASE
CREATE TABLE CATEGORIES
(
    CATEGORY_ID INT PRIMARY KEY,
    CATEGORY_NAME NVARCHAR(256),
    DESCRIPTION NVARCHAR(1024),
    PICTURE VARCHAR(500)
);

CREATE TABLE CUSTOMERS
(
    CUSTOMER_ID VARCHAR(500) PRIMARY KEY,
    COMPANY_NAME NVARCHAR(128),
    CONTACT_NAME NVARCHAR(256),
    CONTACT_TITLE NVARCHAR(128),
    ADDRESS NVARCHAR(128),
    CITY NVARCHAR(128),
    REGION NVARCHAR(128),
    POSTAL_CODE NVARCHAR(16),
    COUNTRY NVARCHAR(128),
    PHONE NVARCHAR(32),
    FAX NVARCHAR(32)
);

CREATE TABLE EMPLOYEES
(
    EMPLOYEES_ID INT PRIMARY KEY,
    LAST_NAME NVARCHAR(128),
    FIRST_NAME NVARCHAR(128),
    TITLE NVARCHAR(128),
    TIEL_OF_COURTESY NVARCHAR(128),
    BIRDTH_DATE DATE,
    HIRE_DATE DATE,
    ADDRES NVARCHAR(128),
    CITY NVARCHAR(128),
    REGION NVARCHAR(128),
    POSTAL_CODE NVARCHAR(16),
    COUNTY NVARCHAR(128),
    HOME_PHONE NVARCHAR(16),
    EXTENSION NVARCHAR(16),
    PHOTE VARCHAR(500),
    NOTE NVARCHAR(1056),
    REPORTS_TO INT,
    PHOTE_PATH NVARCHAR(256)
);

CREATE TABLE REGION
(
    REGION_ID INT PRIMARY KEY ,
    REGION_DESCRIPTION NVARCHAR(1024)
);

CREATE TABLE TERRITORIES
(
    TERRITORY_ID VARCHAR(500) PRIMARY KEY,
    TERRITORY_DESCRIPCION NVARCHAR(1024),
    REGION_ID INT
);

CREATE TABLE EMPLOYEE_TERRITORIES
(
    EMPLOYEE_ID INT,
    TERRITORY_ID VARCHAR(500),
    FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES (EMPLOYEES_ID),
    FOREIGN KEY (TERRITORY_ID) REFERENCES TERRITORIES (TERRITORY_ID)
);

CREATE TABLE SHIPPERS
(
    SHIPPER_ID INT PRIMARY KEY,
    COMPANY_DESCRIPTION NVARCHAR(1024),
    PHONE NVARCHAR(16)
);

CREATE TABLE ORDERS
(
    ORDER_ID INT PRIMARY KEY,
    CUSTOMER_ID VARCHAR(500),
    EMPLOYEE_ID INT,
    ORDER_DATE DATE,
    REQUIRED_DATE DATE,
    SHIPPED_DATE DATE,
    SHIP_VIA INT,
    FREIGHT INT,
    SHIP_NAME NVARCHAR(128),
    SHIP_ADDRESS NVARCHAR(128),
    SHIP_CITY NVARCHAR(128),
    SHIP_REGION NVARCHAR(128),
    SHIP_POSTAL_CODE NVARCHAR(16),
    SHIP_COUNTRY NVARCHAR(128)
);

CREATE TABLE SUPPLIERS
(
    SUPPLIER_ID INT PRIMARY KEY,
    COMPAY_NAME NVARCHAR(128),
    CONTACT_NAME NVARCHAR(128),
    CONTACT_TITLE NVARCHAR(128),
    ADDRES NVARCHAR(128),
    CITY NVARCHAR(128),
    REGION NVARCHAR(128),
    POSTAL_CODE NVARCHAR(16),
    COUNTY NVARCHAR(128),
    PHONE NVARCHAR(32),
    FAX NVARCHAR(32),
    HOMEPAGE NVARCHAR(128)
);

CREATE TABLE PRODUCTS
(
    PRODUCT_ID INT PRIMARY KEY,
    PRODUCT_NAME NVARCHAR(128),
    SUPPLIER_ID INT,
    CATEGORY_ID INT,
    QUANTITY_PER_UNIT VARCHAR(64),
    UNIT_PRICE MONEY,
    UNITS_IN_STOCK INT,
    UNITS_ON_ORDER INT,
    REORDER_LEVEL INT,
    DISCOUNTINUED INT
);

CREATE TABLE ORDER_DETAILS
(
    ORDER_ID INT,
    PRODUCT_ID INT,
    UNIT_PRICE MONEY,
    QUANTITY INT,
    DISCOUNT INT,
    FOREIGN KEY (ORDER_ID) REFERENCES ORDERS (ORDER_ID),
    FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS (PRODUCT_ID)
);

CREATE TABLE CUSTOMER_DEMOGRAPHICS
(
    CUSTOMER_TYPE_ID VARCHAR(500) PRIMARY KEY,
    CUSTOMER_DESC NVARCHAR(1024),
);

CREATE TABLE CUSTOMER_CUSTOMER_DEMO
(
    CUSTOMER_ID VARCHAR(500),
    CUSTOMER_TYPE_ID VARCHAR(500),
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS (CUSTOMER_ID),
    FOREIGN KEY (CUSTOMER_TYPE_ID) REFERENCES CUSTOMER_DEMOGRAPHICS (CUSTOMER_TYPE_ID)
);

CREATE TABLE US_STATES
(
    STATE_ID INT PRIMARY KEY,
    STATE_NAME NVARCHAR(128),
    STATE_ABBR NVARCHAR(128),
    STATE_REGION NVARCHAR(128)
);

CREATE TABLE TipoCambioRangoResult
(
    MONEDA INT,
    FECHA DATE,
    VENTA FLOAT,
    COMPRA FLOAT
);

-- QUERY DB DB_TEST
-- QUEST #1
SELECT
    A.PRODUCT_ID,
    A.PRODUCT_NAME,
    SUM((B.UNIT_PRICE * B.QUANTITY)) AS TOTALS
FROM PRODUCTS A
LEFT JOIN ORDER_DETAILS B ON B.PRODUCT_ID = A.PRODUCT_ID
GROUP BY A.PRODUCT_ID, A.PRODUCT_NAME;

-- QUEST #2
SELECT
    A.EMPLOYEES_ID,
    CONCAT_WS(' ', A.FIRST_NAME, A.LAST_NAME),
    SUM((C.UNIT_PRICE * C.QUANTITY)) AS TOTALS
FROM EMPLOYEES A
LEFT JOIN ORDERS B ON B.EMPLOYEE_ID = A.EMPLOYEES_ID
INNER JOIN ORDER_DETAILS C on B.ORDER_ID = C.ORDER_ID
GROUP BY A.EMPLOYEES_ID, CONCAT_WS(' ', A.FIRST_NAME, A.LAST_NAME);

-- QUEST #3
SELECT
    A.PRODUCT_ID,
    A.PRODUCT_NAME,
    SUM((B.UNIT_PRICE * B.QUANTITY)) AS TOTALS,
    DATENAME(MONTH, C.ORDER_DATE) AS MONTH
FROM PRODUCTS A
INNER JOIN ORDER_DETAILS B ON B.PRODUCT_ID = A.PRODUCT_ID
INNER JOIN ORDERS C ON C.ORDER_ID = B.ORDER_ID
GROUP BY A.PRODUCT_ID, A.PRODUCT_NAME, DATENAME(MONTH, C.ORDER_DATE);

-- QUEST #4
SELECT
    DISTINCT
    A.SUPPLIER_ID,
    A.COMPAY_NAME
FROM SUPPLIERS A
INNER JOIN PRODUCTS P on A.SUPPLIER_ID = P.SUPPLIER_ID
    AND P.PRODUCT_NAME != 'Chartreuse verte';

-- QUEST #5
SELECT
    t.name AS NombreDeTabla,
    SCHEMA_NAME(t.schema_id) AS Esquema
FROM
    sys.tables t
WHERE
    NOT EXISTS (
        SELECT
            *
        FROM
            sys.indexes i
        WHERE
            t.object_id = i.object_id AND
            i.index_id != 0
    )
ORDER BY
    NombreDeTabla;

CREATE INDEX IDX_PRODUCTO ON ORDER_DETAILS (PRODUCT_ID) INCLUDE (ORDER_ID);
CREATE INDEX IDX_EMPLOYEES ON EMPLOYEES (EMPLOYEES_ID) INCLUDE (FIRST_NAME, LAST_NAME);
CREATE INDEX IDX_ORDERS ON ORDERS (ORDER_ID) INCLUDE (EMPLOYEE_ID, ORDER_DATE);
CREATE INDEX IDX_ORDER_DETAILS ON ORDER_DETAILS (ORDER_ID, PRODUCT_ID);
CREATE INDEX IDX_PRODUCTOS ON PRODUCTS (PRODUCT_ID, SUPPLIER_ID) INCLUDE (PRODUCT_NAME);